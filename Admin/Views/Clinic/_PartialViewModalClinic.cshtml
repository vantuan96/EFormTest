@using Admin.Models
@model ClinicViewModel
<head>
    <script src="~/assets/lib/select2/select2.min.js"></script>
    <link href="~/assets/lib/select2/select2.css" rel="stylesheet" />
    <style>
        .select2-dropdown {
            z-index:9999;
        }
    </style>
</head>
<div style="z-index:9989;" class="modal" tabindex="-1" role="dialog" id="modalEditSpecialty">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                @if (!Model.IsEdit)
                {
                    <h5 class="modal-title">Thêm phòng khám</h5>
                }
                else
                {
                    <h5 class="modal-title">Sửa phòng khám</h5>
                }
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="frmSpecialtyDetail">
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(s => s.Id)
                    <div class="row">
                        <div class="col-4 mdc-label"><b>Tên tiếng Việt:</b></div>
                        <div class="col-8">
                            @Html.TextBoxFor(s => s.ViName, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-4 mdc-label"><b>Tên tiếng Anh:</b></div>
                        <div class="col-8">
                            @Html.TextBoxFor(s => s.EnName, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-4 mdc-label"><b>Mã:</b></div>
                        <div class="col-8">
                            @Html.TextBoxFor(s => s.Code, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-4 mdc-label"><b>CK đặc thù</b></div>
                        <div class="col-8" id="setup">
                            @foreach (var item in Model.SetUpClinic)
                            {
                                if (item.Status == true)
                                {
                                    <label name="buttun" class="btn btn-default">
                                        @item.ViName&nbsp;<input id="@item.ViName" checked type="checkbox" name="SetUpClinic" value="@item.Code" />&nbsp;
                                    </label>
                                }
                                else
                                {
                                    <label name="buttun" class="btn btn-default">
                                        @item.ViName&nbsp;<input id="@item.ViName" type="checkbox" name="SetUpClinic" value="@item.Code" />&nbsp;
                                    </label>
                                }
                            }
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-4 mdc-label"><b>Chuyên khoa:</b></div>
                        <div class=" form-group col-sm-8">
                            @Html.DropDownList("SpecialtyId", new SelectList(Model.ListSpecialties, "Value", "Text", null), new { @class = "form-control" })
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                @if (!Model.IsEdit)
                {
                    <button type="button" class="btn btn-success" onclick="saveSpecialty()">Thêm</button>
                }
                else
                {
                    <button type="button" class="btn btn-success" onclick="saveSpecialty()">Lưu</button>
                }
            </div>
        </div>
    </div>
</div>

<script>
    function saveSpecialty() {
        let string_codeSetUpClinic = SetStatusSetupClinic();
        let serializeArray_setUpClinic = { name: "SetUpClinicDatas", value: string_codeSetUpClinic };
        $.ajax(
            {
                type: "POST",
                data: $('#frmSpecialtyDetail').serializeArray().concat(serializeArray_setUpClinic),
                url: "@Url.Action("SaveClinic", "Clinic")",
                success: function (data) {
                    if (data != null) {
                        $("#modalEditSpecialty").modal('hide');
                        $('#tbl-specialties').DataTable().ajax.reload();
                    }
                    else {
                        // show popup alert save false
                    }
                }
            })
    }

    function SetStatusSetupClinic() {
        let arrayObj = [];
        var checkBn = document.getElementsByName('SetUpClinic');
        for (var i = 0; i < checkBn.length; i++) {
            if (checkBn[i].checked === true) {
                let obj = checkBn[i].value;
                arrayObj.push(obj);
            }
        }
        let arrayTostring = arrayObj.join(",");
        return arrayTostring;
    }
    $(document).ready(function () {
        $("#SpecialtyId").select2({
            closeOnSelect: false,
            matcher: matchCustom
        });
    });

    function matchCustom(params, data) {
        // console.log(params);
        console.log(params);
        // If there are no search terms, return all of the data
        if ($.trim(params.term) === '') {
            return data;
        }

        // Do not display the item if there is no 'text' property
        if (typeof data.text === 'undefined') {
            return null;
        }

        // `params.term` should be the term that is used for searching
        // `data.text` is the text that is displayed for the data object
        if (data.text.toLowerCase().indexOf($.trim(params.term)) > -1) {
            var modifiedData = $.extend({}, data, true);
            // modifiedData.text += ' (matched)';
            // You can return modified objects from here
            // This includes matching the `children` how you want in nested data sets
            return modifiedData;
        }

        // Return `null` if the term should not be displayed
        return null;
    }

</script>